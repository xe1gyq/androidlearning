=============================================================================================
Kernel Drivers & IOCTLs
=============================================================================================

Code to handle logcat and log Android infrastructure
$ nano drivers/staging/android/logger.c

=============================================================================================
Binder
=============================================================================================

Binder is the Android IPC Architecture
One process cannot find another process
When an application starts and wakes up it asks Binder Service Manager for a Binder Token,
which is like an address, Binder Service Manager assigns a PID:
 -  60 PID VibratorService
 - 100 PID HelloWorld
Binder Service Manager has a fixed address

ToDo! Understand about Binder calls from Vibrator

$ git clone https://github.com/thenewcircle/FibonacciBinderDemo.git
Proxy
Serialize data from the Binder
fibJR .aidl & .java
Java-based proxies and stubs can be automatically generated by aidl tool for services
described with AIDL.

  IFibonacciService.aidl generates IFibonacciService.java

Zygote start the Services
 1. Load to the memory
 2. Run
 3. Binder token
 4. Service Manager

 Activity
 Intent
 Activity Manager Service
 Package Manager Service
 Zygote
 DEX
 mmap
 VM
 Service
 Binder
 Service Manager

New function that Service exposes: IFibonacciService.aidl
 void intelGDL(int i, String student)
It will be automatically generated
Native functions are needed to go down into Native area, JNI
Java C++ C Concepts, 3 layers, see
 _data.writeInterface
 _data.writeInt
 _data.writeString
$ nano ~/aosp/frameworks/base/core/java/android/os/Parcel.java
$ nano ~/aosp/frameworks/base/core/jni/android_os_Parcel.cpp
$ nano ~/aosp/frameworks/native/libs/binder/Parcel.cpp

ToDo! In the service function fib(request)
 - Step 1: Vibrate 2000 ms
 - Step 2: Vibrate a pattern based on the n, if fib(4) will be 4x (1000ms vibrate, 1000ms sleep)

1. Create JNI Layer for C 
   Page 225
2. Create Java that uses JNI

Main 222 mkrnod

How to see what Hardware we have?
$ cat /system/atc/permissions 

==================================================================================================
Android System Initialization
==================================================================================================

All configuration / applications for initialization are found under
$ ls ~/aosp/out/target/product/alpha/

 1. Bootloader
 2. Kernel
 3. Android Specifics
 4. Init
 5. .rc
 6. Steps / Triggers
    $ ls ~/aosp/system/core/init.c
 7. Filesystem mounting
    $ ls ~/aosp/system/core/*flounder*
    mount_all /fstab.flounder
 8. Start Android
    $ cat ~/aosp/.../init.rc
    start class core

# End of File
